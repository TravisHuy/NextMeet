package com.nhathuy.nextmeet.utils

import android.app.AlarmManager
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.media.AudioAttributes
import android.media.RingtoneManager
import android.os.Build
import android.util.Log
import com.nhathuy.nextmeet.AlarmReceiver
import com.nhathuy.nextmeet.model.Notification
import com.nhathuy.nextmeet.model.NotificationAction
import com.nhathuy.nextmeet.model.NotificationType
import com.nhathuy.nextmeet.repository.NotificationRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.delay
import kotlinx.coroutines.withContext
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.concurrent.ConcurrentHashMap
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class NotificationManagerService @Inject constructor(
    private val context: Context,
    private val notificationRepository: NotificationRepository
) {
    // H·ªá th·ªëng qu·∫£n l√Ω b√°o th·ª©c v√† th√¥ng b√°o c·ªßa Android
    private val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
    private val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

    // CoroutineScope ƒë·ªÉ x·ª≠ l√Ω c√°c t√°c v·ª• ch·∫°y ng·∫ßm
    private val serviceScope = CoroutineScope(Dispatchers.IO + SupervisorJob())

    // Qu·∫£n l√Ω c√°c t√°c v·ª• ƒëang ch·ªù x·ª≠ l√Ω (c√≥ th·ªÉ hu·ª∑ khi c·∫ßn)
    private val pendingOperations = ConcurrentHashMap<Int, Job>()

    companion object {
        const val APPOINTMENT_CHANNEL_ID = "appointment_reminders"
        const val NOTE_CHANNEL_ID = "note_reminders"
        const val REMINDER_MINUTES_DEFAULT = 5L // Nh·∫Øc nh·ªü tr∆∞·ªõc 5 ph√∫t
        const val MAX_RETRIES = 3 // S·ªë l·∫ßn th·ª≠ l·∫°i khi l√™n l·ªãch b√°o th·ª©c
        const val RETRY_DELAY_MS = 100L // Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠
    }

    init {
        createNotificationChannels()
    }

    /**
     * T·∫°o c√°c k√™nh th√¥ng b√°o cho Android 8.0 tr·ªü l√™n
     */
    private fun createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val alarmSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM)
            val audioAttributes = AudioAttributes.Builder()
                .setUsage(AudioAttributes.USAGE_ALARM)
                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                .build()

            val channels = listOf(
                NotificationChannel(
                    APPOINTMENT_CHANNEL_ID,
                    "Nh·∫Øc nh·ªü cu·ªôc h·∫πn",
                    NotificationManager.IMPORTANCE_HIGH
                ).apply {
                    description = "Th√¥ng b√°o nh·∫Øc nh·ªü v·ªÅ c√°c cu·ªôc h·∫πn s·∫Øp t·ªõi"
                    enableVibration(true)
                    setSound(alarmSound, audioAttributes)
                },
                NotificationChannel(
                    NOTE_CHANNEL_ID,
                    "Nh·∫Øc nh·ªü ghi ch√∫",
                    NotificationManager.IMPORTANCE_HIGH
                ).apply {
                    description = "Th√¥ng b√°o nh·∫Øc nh·ªü v·ªÅ c√°c ghi ch√∫ s·∫Øp t·ªõi"
                    enableVibration(true)
                    setSound(alarmSound, audioAttributes)
                }
            )

            notificationManager.createNotificationChannels(channels)
        }
    }

    /**
     * Ki·ªÉm tra ·ª©ng d·ª•ng c√≥ quy·ªÅn l√™n l·ªãch b√°o th·ª©c ch√≠nh x√°c hay kh√¥ng (Android 12+)
     */
    private fun canScheduleExactAlarms(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val canSchedule = alarmManager.canScheduleExactAlarms()
            Log.d("NotificationManager", "Can schedule exact alarms: $canSchedule")
            canSchedule
        } else {
            Log.d("NotificationManager", "Android version < 12, exact alarms allowed by default")
            true
        }
    }

    /**
     * L√™n l·ªãch th√¥ng b√°o nh·∫Øc cu·ªôc h·∫πn tr∆∞·ªõc th·ªùi gian ƒë√£ ƒë·∫∑t
     */
    suspend fun scheduleAppointmentNotification(
        userId: Int,
        appointmentId: Int,
        title: String,
        description: String,
        appointmentTime: Long,
        location: String? = null,
        contactName: String? = null
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            Log.d("NotificationManager", "Starting appointment notification scheduling...")
            Log.d("NotificationManager", "UserId: $userId, AppointmentId: $appointmentId")
            Log.d("NotificationManager", "Title: $title, ContactName: $contactName")
            Log.d("NotificationManager", "AppointmentTime: $appointmentTime, Location: $location")
            
            if (!canScheduleExactAlarms()) {
                Log.w("NotificationManager", "Kh√¥ng c√≥ quy·ªÅn b√°o th·ª©c ch√≠nh x√°c")
                return@withContext false
            }

            cancelPendingOperation(appointmentId)

            val reminderTime = appointmentTime - REMINDER_MINUTES_DEFAULT * 60 * 1000
            Log.d("NotificationManager", "Calculated reminder time: $reminderTime")
            Log.d("NotificationManager", "Current time: ${System.currentTimeMillis()}")
            
            if (reminderTime <= System.currentTimeMillis()) {
                Log.w("NotificationManager", "Kh√¥ng th·ªÉ ƒë·∫∑t b√°o th·ª©c trong qu√° kh·ª©")
                Log.w("NotificationManager", "Reminder time: $reminderTime, Current time: ${System.currentTimeMillis()}")
                return@withContext false
            }

            val notification = Notification(
                id = 0,
                userId = userId,
                title = "üïê Cu·ªôc h·∫πn s·∫Øp di·ªÖn ra",
                message = buildAppointmentMessage(title, description, location, contactName, appointmentTime),
                notificationType = NotificationType.APPOINTMENT_REMINDER,
                relatedId = appointmentId,
                scheduledTime = reminderTime,
                actionType = NotificationAction.OPEN_APPOINTMENT
            )

            Log.d("NotificationManager", "Created notification: ${notification.message}")

            // Chuy·ªÉn ƒë·ªïi Long sang Int an to√†n
            val notificationId = notificationRepository.insertNotification(notification).getOrThrow().toInt()
            Log.d("NotificationManager", "Saved notification to database with ID: $notificationId")

            val success = scheduleAlarmWithRetry(
                notificationId, reminderTime, notification.title, notification.message,
                location, appointmentId, NotificationType.APPOINTMENT_REMINDER
            )

            if (success) {
                Log.d("NotificationManager", "ƒê√£ l√™n l·ªãch nh·∫Øc cu·ªôc h·∫πn l√∫c $reminderTime")
                true
            } else {
                notificationRepository.deleteNotificationById(notificationId)
                Log.e("NotificationManager", "L·ªói l√™n l·ªãch, xo√° th√¥ng b√°o ƒë√£ l∆∞u")
                false
            }

        } catch (e: Exception) {
            Log.e("NotificationManager", "L·ªói khi ƒë·∫∑t l·ªãch cu·ªôc h·∫πn", e)
            false
        }
    }

    /**
     * L√™n l·ªãch th√¥ng b√°o nh·∫Øc ghi ch√∫
     */
    suspend fun scheduleNoteNotification(
        userId: Int,
        noteId: Int,
        title: String,
        content: String,
        noteTime: Long
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            if (!canScheduleExactAlarms()) {
                Log.w("NotificationManager", "Kh√¥ng c√≥ quy·ªÅn b√°o th·ª©c ch√≠nh x√°c")
                return@withContext false
            }

            val reminderTime = noteTime - REMINDER_MINUTES_DEFAULT * 60 * 1000
            if (reminderTime <= System.currentTimeMillis()) {
                Log.w("NotificationManager", "Kh√¥ng th·ªÉ ƒë·∫∑t b√°o th·ª©c trong qu√° kh·ª©")
                return@withContext false
            }

            val notification = Notification(
                id = 0,
                userId = userId,
                title = "üìù Nh·∫Øc nh·ªü ghi ch√∫",
                message = "üìù $title\n$content",
                notificationType = NotificationType.NOTE_REMINDER,
                relatedId = noteId,
                scheduledTime = reminderTime,
                actionType = NotificationAction.OPEN_NOTE
            )

            // Chuy·ªÉn ƒë·ªïi Long sang Int an to√†n
            val notificationId = notificationRepository.insertNotification(notification).getOrThrow().toInt()

            val success = scheduleAlarmWithRetry(
                notificationId, reminderTime, notification.title, notification.message,
                null, noteId, NotificationType.NOTE_REMINDER
            )

            if (success) {
                Log.d("NotificationManager", "ƒê√£ l√™n l·ªãch nh·∫Øc ghi ch√∫ l√∫c $reminderTime")
                true
            } else {
                notificationRepository.deleteNotificationById(notificationId)
                Log.e("NotificationManager", "L·ªói l√™n l·ªãch, xo√° th√¥ng b√°o ƒë√£ l∆∞u")
                false
            }
        } catch (e: Exception) {
            Log.e("NotificationManager", "L·ªói khi ƒë·∫∑t l·ªãch ghi ch√∫", e)
            false
        }
    }

    /**
     * Hu·ª∑ th√¥ng b√°o theo ID (t·ª´ AlarmManager, NotificationManager, Room)
     */
    suspend fun cancelNotification(notificationId: Int) = withContext(Dispatchers.IO) {
        try {
            cancelPendingOperation(notificationId)

            val intent = Intent(context, AlarmReceiver::class.java)
            val pendingIntent = PendingIntent.getBroadcast(
                context, notificationId, intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )

            alarmManager.cancel(pendingIntent)
            notificationManager.cancel(notificationId)
            notificationRepository.deleteNotificationById(notificationId)

            Log.d("NotificationManager", "ƒê√£ hu·ª∑ th√¥ng b√°o $notificationId")
        } catch (e: Exception) {
            Log.e("NotificationManager", "L·ªói khi hu·ª∑ th√¥ng b√°o", e)
        }
    }

    /**
     * Th·ª≠ l√™n l·ªãch b√°o th·ª©c t·ªëi ƒëa 3 l·∫ßn n·∫øu x·∫£y ra l·ªói
     */
    private suspend fun scheduleAlarmWithRetry(
        notificationId: Int,
        triggerTime: Long,
        title: String,
        message: String,
        location: String?,
        relatedId: Int,
        notificationType: NotificationType
    ): Boolean {
        repeat(MAX_RETRIES) { attempt ->
            try {
                scheduleAlarm(notificationId, triggerTime, title, message, location, relatedId, notificationType)
                return true
            } catch (e: SecurityException) {
                Log.e("NotificationManager", "L·ªói quy·ªÅn tr√™n l·∫ßn th·ª≠ ${attempt + 1}: ${e.message}")
                return false
            } catch (e: Exception) {
                Log.e("NotificationManager", "L·ªói th·ª≠ l·∫ßn ${attempt + 1}", e)
                if (attempt < MAX_RETRIES - 1) delay(RETRY_DELAY_MS)
            }
        }
        return false
    }

    /**
     * L√™n l·ªãch b√°o th·ª©c (AlarmManager) t·∫°i th·ªùi ƒëi·ªÉm ch·ªâ ƒë·ªãnh
     */
    private fun scheduleAlarm(
        notificationId: Int,
        triggerTime: Long,
        title: String,
        message: String,
        location: String?,
        relatedId: Int,
        notificationType: NotificationType
    ) {
        Log.d("NotificationManager", "Setting up alarm for notification $notificationId")
        Log.d("NotificationManager", "Trigger time: $triggerTime, Related ID: $relatedId")
        Log.d("NotificationManager", "Notification type: ${notificationType.name}")
        
        val intent = Intent(context, AlarmReceiver::class.java).apply {
            putExtra("notification_id", notificationId)
            putExtra("title", title)
            putExtra("message", message)
            putExtra("location", location)
            putExtra("related_id", relatedId)
            putExtra("notification_type", notificationType.name)
        }

        val pendingIntent = PendingIntent.getBroadcast(
            context, notificationId, intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        try {
            when {
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
                    if (alarmManager.canScheduleExactAlarms()) {
                        alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent)
                        Log.d("NotificationManager", "Scheduled exact alarm for Android 12+ with permission")
                    } else {
                        throw SecurityException("Ch∆∞a c·∫•p quy·ªÅn SCHEDULE_EXACT_ALARM")
                    }
                }
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.M -> {
                    alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent)
                    Log.d("NotificationManager", "Scheduled exact alarm for Android 6-11")
                }
                else -> {
                    alarmManager.setExact(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent)
                    Log.d("NotificationManager", "Scheduled exact alarm for Android < 6")
                }
            }

            Log.d("NotificationManager", "ƒê·∫∑t b√°o th·ª©c th√†nh c√¥ng l√∫c $triggerTime")
        } catch (e: SecurityException) {
            Log.e("NotificationManager", "Thi·∫øu quy·ªÅn khi ƒë·∫∑t b√°o th·ª©c: ${e.message}")
            throw e
        } catch (e: Exception) {
            Log.e("NotificationManager", "L·ªói khi ƒë·∫∑t b√°o th·ª©c: ${e.message}")
            throw e
        }
    }

    /**
     * T·∫°o n·ªôi dung th√¥ng b√°o cho cu·ªôc h·∫πn
     */
    private fun buildAppointmentMessage(
        title: String,
        description: String,
        location: String?,
        contactName: String?,
        appointmentTime: Long
    ): String = buildString {
        val appointmentTimeStr = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date(appointmentTime))
        append("‚è∞ Cu·ªôc h·∫πn l√∫c $appointmentTimeStr\n")
        append("üìÖ $title")
        if (description.isNotBlank()) append("\nüìù $description")
        if (!contactName.isNullOrBlank()) append("\nüë§ V·ªõi: $contactName")
        if (!location.isNullOrBlank()) append("\nüìç T·∫°i: $location")
    }

    /**
     * H·ªßy t√°c v·ª• ƒëang ch·ªù x·ª≠ l√Ω (n·∫øu c√≥)
     */
    private fun cancelPendingOperation(id: Int) {
        pendingOperations[id]?.cancel()
        pendingOperations.remove(id)
    }

    /**
     * Ki·ªÉm tra quy·ªÅn ƒë·∫∑t b√°o th·ª©c ch√≠nh x√°c (d√πng ƒë∆∞·ª£c ·ªü UI)
     */
    fun hasExactAlarmPermission(): Boolean = canScheduleExactAlarms()

    /**
     * D·ªçn d·∫πp t·∫•t c·∫£ coroutine khi kh√¥ng d√πng n·ªØa
     */
    fun cleanup() {
        serviceScope.cancel()
        pendingOperations.values.forEach { it.cancel() }
        pendingOperations.clear()
    }
}