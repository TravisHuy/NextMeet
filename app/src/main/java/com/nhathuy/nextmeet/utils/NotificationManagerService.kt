package com.nhathuy.nextmeet.utils

import android.app.AlarmManager
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.media.AudioAttributes
import android.media.RingtoneManager
import android.net.Uri
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import com.nhathuy.nextmeet.AlarmReceiver
import com.nhathuy.nextmeet.R
import com.nhathuy.nextmeet.model.Notification
import com.nhathuy.nextmeet.model.NotificationAction
import com.nhathuy.nextmeet.model.NotificationType
import com.nhathuy.nextmeet.repository.NotificationRepository
import com.nhathuy.nextmeet.ui.SolutionActivity
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.withContext
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.concurrent.ConcurrentHashMap
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class NotificationManagerService @Inject constructor(
    private val context: Context,
    private val notificationRepository: NotificationRepository
) {
    // H·ªá th·ªëng qu·∫£n l√Ω b√°o th·ª©c v√† th√¥ng b√°o c·ªßa Android
    private val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
    private val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

    // CoroutineScope ƒë·ªÉ x·ª≠ l√Ω c√°c t√°c v·ª• ch·∫°y ng·∫ßm
    private val serviceScope = CoroutineScope(Dispatchers.IO + SupervisorJob())

    // Qu·∫£n l√Ω c√°c t√°c v·ª• ƒëang ch·ªù x·ª≠ l√Ω (c√≥ th·ªÉ hu·ª∑ khi c·∫ßn)
    private val pendingOperations = ConcurrentHashMap<Int, Job>()

    companion object {
        const val APPOINTMENT_CHANNEL_ID = "appointment_reminders"
        const val APPOINTMENT_ALARM_CHANNEL_ID = "appointment_alarms"
        const val NOTE_CHANNEL_ID = "note_reminders"
        const val NOTE_ALARM_CHANNEL_ID = "note_alarms"
        const val REMINDER_MINUTES_DEFAULT = 5L // Nh·∫Øc nh·ªü tr∆∞·ªõc 5 ph√∫t
        const val MAX_RETRIES = 3 // S·ªë l·∫ßn th·ª≠ l·∫°i khi l√™n l·ªãch b√°o th·ª©c
        const val RETRY_DELAY_MS = 100L // Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠

        // Th√™m constant ƒë·ªÉ ph√¢n bi·ªát reminder v√† alarm
        const val NOTIFICATION_TYPE_REMINDER = "reminder"
        const val NOTIFICATION_TYPE_ALARM = "alarm"
    }

    init {
        createNotificationChannels()
    }

    /**
     * T·∫°o c√°c k√™nh th√¥ng b√°o cho Android 8.0 tr·ªü l√™n
     */
    private fun createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val alarmSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM)
            val notificationSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)

            val notificationSoundUri = Uri.parse("android.resource://${context.packageName}/${R.raw.notification}")

            val alarmAudioAttributes = AudioAttributes.Builder()
                .setUsage(AudioAttributes.USAGE_ALARM)
                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                .build()

            val notificationAudioAttributes = AudioAttributes.Builder()
                .setUsage(AudioAttributes.USAGE_NOTIFICATION)
                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                .build()

            val channels = listOf(
                // K√™nh cho th√¥ng b√°o nh·∫Øc nh·ªü (5 ph√∫t tr∆∞·ªõc)
                NotificationChannel(
                    APPOINTMENT_CHANNEL_ID,
                    "Nh·∫Øc nh·ªü cu·ªôc h·∫πn",
                    NotificationManager.IMPORTANCE_DEFAULT
                ).apply {
                    description = "Th√¥ng b√°o nh·∫Øc nh·ªü v·ªÅ c√°c cu·ªôc h·∫πn s·∫Øp t·ªõi"
                    enableVibration(true)
                    vibrationPattern = longArrayOf(0, 250, 100, 250)
                    setSound(notificationSoundUri, notificationAudioAttributes)
                    setShowBadge(true)
                    enableLights(true)
                },
                // K√™nh cho b√°o th·ª©c (ƒë√∫ng gi·ªù)
                NotificationChannel(
                    APPOINTMENT_ALARM_CHANNEL_ID,
                    "B√°o th·ª©c cu·ªôc h·∫πn",
                    NotificationManager.IMPORTANCE_HIGH
                ).apply {
                    description = "B√°o th·ª©c khi ƒë·∫øn gi·ªù cu·ªôc h·∫πn"
                    enableVibration(false)
                    setSound(null,null)
                },
                NotificationChannel(
                    NOTE_CHANNEL_ID,
                    "Nh·∫Øc nh·ªü ghi ch√∫",
                    NotificationManager.IMPORTANCE_DEFAULT
                ).apply {
                    description = "Th√¥ng b√°o nh·∫Øc nh·ªü v·ªÅ c√°c ghi ch√∫ s·∫Øp t·ªõi"
                    vibrationPattern = longArrayOf(0, 250, 100, 250)
                    enableVibration(true)
                    setSound(notificationSoundUri, notificationAudioAttributes)
                },
                NotificationChannel(
                    NOTE_ALARM_CHANNEL_ID,
                    "Nh·∫Øc nh·ªü ghi ch√∫",
                    NotificationManager.IMPORTANCE_HIGH
                ).apply {
                    description = "Th√¥ng b√°o nh·∫Øc nh·ªü v·ªÅ c√°c ghi ch√∫ ƒë·∫øn gi·ªù"
                    enableVibration(false)
                    setSound(null,null)
                }
            )

            notificationManager.createNotificationChannels(channels)
        }
    }

    /**
     * Ki·ªÉm tra ·ª©ng d·ª•ng c√≥ quy·ªÅn l√™n l·ªãch b√°o th·ª©c ch√≠nh x√°c hay kh√¥ng (Android 12+)
     */
    private fun canScheduleExactAlarms(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            alarmManager.canScheduleExactAlarms()
        } else {
            true
        }
    }

    /**
     * L√™n l·ªãch c·∫£ th√¥ng b√°o nh·∫Øc nh·ªü (5 ph√∫t tr∆∞·ªõc) v√† b√°o th·ª©c (ƒë√∫ng gi·ªù) cho cu·ªôc h·∫πn
     */
    suspend fun scheduleAppointmentNotification(
        userId: Int,
        appointmentId: Int,
        title: String,
        description: String,
        appointmentTime: Long,
        location: String? = null,
        contactName: String? = null
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            if (!canScheduleExactAlarms()) {
                Log.w("NotificationManager", "Kh√¥ng c√≥ quy·ªÅn b√°o th·ª©c ch√≠nh x√°c")
                return@withContext false
            }

            cancelPendingOperation(appointmentId)

            val currentTime = System.currentTimeMillis()
            val reminderTime = appointmentTime - REMINDER_MINUTES_DEFAULT * 60 * 1000

            var reminderSuccess = true
            var alarmSuccess = true

            // 1. L√™n l·ªãch th√¥ng b√°o nh·∫Øc nh·ªü (5 ph√∫t tr∆∞·ªõc) n·∫øu ch∆∞a qu√° gi·ªù
            if (reminderTime > currentTime) {
                val reminderNotification = Notification(
                    id = 0,
                    userId = userId,
                    title = "üîî Nh·∫Øc nh·ªü cu·ªôc h·∫πn",
                    message = buildReminderMessage(title, description, location, contactName, appointmentTime),
                    notificationType = NotificationType.APPOINTMENT_REMINDER,
                    relatedId = appointmentId,
                    scheduledTime = reminderTime,
                    actionType = NotificationAction.OPEN_APPOINTMENT
                )

                val reminderNotificationId = notificationRepository.insertNotification(reminderNotification).getOrThrow().toInt()

                reminderSuccess = scheduleAlarmWithRetry(
                    reminderNotificationId,
                    reminderTime,
                    reminderNotification.title,
                    reminderNotification.message,
                    location,
                    appointmentId,
                    NotificationType.APPOINTMENT_REMINDER,
                    isAlarm = false
                )

                if (!reminderSuccess) {
                    notificationRepository.deleteNotificationById(reminderNotificationId)
                    Log.e("NotificationManager", "L·ªói l√™n l·ªãch reminder, xo√° th√¥ng b√°o ƒë√£ l∆∞u")
                }
            }

            // 2. L√™n l·ªãch b√°o th·ª©c (ƒë√∫ng gi·ªù cu·ªôc h·∫πn) n·∫øu ch∆∞a qu√° gi·ªù
            if (appointmentTime > currentTime) {
                val alarmNotification = Notification(
                    id = 0,
                    userId = userId,
                    title = "‚è∞ ƒê·∫øn gi·ªù cu·ªôc h·∫πn!",
                    message = buildAlarmMessage(title, description, location, contactName),
                    notificationType = NotificationType.APPOINTMENT_REMINDER,
                    relatedId = appointmentId,
                    scheduledTime = appointmentTime,
                    actionType = NotificationAction.OPEN_APPOINTMENT
                )

                val alarmNotificationId = notificationRepository.insertNotification(alarmNotification).getOrThrow().toInt()

                alarmSuccess = scheduleAlarmWithRetry(
                    alarmNotificationId,
                    appointmentTime,
                    alarmNotification.title,
                    alarmNotification.message,
                    location,
                    appointmentId,
                    NotificationType.APPOINTMENT_REMINDER,
                    isAlarm = true
                )

                if (!alarmSuccess) {
                    notificationRepository.deleteNotificationById(alarmNotificationId)
                    Log.e("NotificationManager", "L·ªói l√™n l·ªãch alarm, xo√° th√¥ng b√°o ƒë√£ l∆∞u")
                }
            }

            val overallSuccess = reminderSuccess && alarmSuccess

            if (overallSuccess) {
                Log.d("NotificationManager", "ƒê√£ l√™n l·ªãch reminder v·ªõi notification l√∫c $reminderTime v√† alarm l√∫c $appointmentTime")
            }

            return@withContext overallSuccess

        } catch (e: Exception) {
            Log.e("NotificationManager", "L·ªói khi ƒë·∫∑t l·ªãch cu·ªôc h·∫πn", e)
            false
        }
    }

    /**
     * L√™n l·ªãch th√¥ng b√°o nh·∫Øc ghi ch√∫
     */
    suspend fun scheduleNoteNotification(
        userId: Int,
        noteId: Int,
        title: String,
        content: String,
        noteTime: Long
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            if (!canScheduleExactAlarms()) {
                Log.w("NotificationManager", "Kh√¥ng c√≥ quy·ªÅn b√°o th·ª©c ch√≠nh x√°c")
                return@withContext false
            }
            cancelPendingOperation(noteId)

            val currentTime = System.currentTimeMillis()
            val reminderTime = noteTime - REMINDER_MINUTES_DEFAULT * 60 * 1000

            var reminderSuccess = true
            var alarmSuccess = true

            if(reminderTime > currentTime){
                val reminderNotification = Notification(
                    id = 0,
                    userId = userId,
                    title = "üìù Nh·∫Øc nh·ªü ghi ch√∫",
                    message = buildReminderNotification(title,content,noteTime),
                    notificationType = NotificationType.NOTE_REMINDER,
                    relatedId = noteId,
                    scheduledTime = reminderTime,
                    actionType = NotificationAction.OPEN_NOTE
                )

                val notificationId = notificationRepository.insertNotification(reminderNotification).getOrThrow().toInt()

                reminderSuccess = scheduleAlarmWithRetry(
                    notificationId, reminderTime, reminderNotification.title, reminderNotification.message,
                    null, noteId, NotificationType.NOTE_REMINDER, isAlarm = false
                )

                if (!reminderSuccess) {
                    Log.e("NotificationManager",
                        "L·ªói l√™n l·ªãch, xo√° th√¥ng b√°o ƒë√£ l∆∞u")
                    notificationRepository.deleteNotificationById(notificationId)
                }
            }

            if(noteTime > currentTime){
                val alarmNotification = Notification(
                    id = 0,
                    userId = userId,
                    title = "‚è∞ ƒê√£ ƒë·∫øn gi·ªù ghi ch√∫",
                    message = buildAlarmNotification(title,content),
                    notificationType = NotificationType.NOTE_REMINDER,
                    relatedId = noteId,
                    scheduledTime = noteTime,
                    actionType = NotificationAction.OPEN_NOTE
                )

                val notificationId = notificationRepository.insertNotification(alarmNotification).getOrThrow().toInt()

                alarmSuccess = scheduleAlarmWithRetry(
                    notificationId, noteTime, alarmNotification.title, alarmNotification.message,
                    null, noteId, NotificationType.NOTE_REMINDER, isAlarm = true
                )

                if (!alarmSuccess) {
                    Log.e("NotificationManager", "L·ªói l√™n l·ªãch, xo√° th√¥ng b√°o ƒë√£ l∆∞u")
                    notificationRepository.deleteNotificationById(notificationId)
                }
            }

            val overallSuccess = reminderSuccess && alarmSuccess

            if (overallSuccess) {
                Log.d("NotificationManager", "ƒê√£ l√™n l·ªãch reminder l√∫c $reminderTime v√† alarm l√∫c $noteTime")
            }
            return@withContext overallSuccess
        } catch (e: Exception) {
            Log.e("NotificationManager", "L·ªói khi ƒë·∫∑t l·ªãch ghi ch√∫", e)
            false
        }
    }

    /**
     * Hu·ª∑ th√¥ng b√°o theo ID (t·ª´ AlarmManager, NotificationManager, Room)
     */
    suspend fun cancelNotification(notificationId: Int) = withContext(Dispatchers.IO) {
        try {
            cancelPendingOperation(notificationId)

            val intent = Intent(context, AlarmReceiver::class.java)
            val pendingIntent = PendingIntent.getBroadcast(
                context, notificationId, intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )

            alarmManager.cancel(pendingIntent)
            notificationManager.cancel(notificationId)
            notificationRepository.deleteNotificationById(notificationId)

            Log.d("NotificationManager", "ƒê√£ hu·ª∑ th√¥ng b√°o $notificationId")
        } catch (e: Exception) {
            Log.e("NotificationManager", "L·ªói khi hu·ª∑ th√¥ng b√°o", e)
        }
    }

    /**
     * g·ª≠i th√¥ng b√°o cho status c·ªßa cu·ªôc h·∫πn
     */
    suspend fun sendSimpleNotification(
        appointmentId : Int,
        title:String,
        message: String
    ) = withContext(Dispatchers.IO) {
        try {
            val notificationId = appointmentId + 1000

            val openAppIntent = Intent(context, SolutionActivity::class.java).apply {
                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
                putExtra("appointment_id", appointmentId)
            }
            val pendingIntent = PendingIntent.getActivity(
                context, notificationId, openAppIntent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )

            val notification = NotificationCompat.Builder(
                context, APPOINTMENT_CHANNEL_ID
            )
                .setSmallIcon(R.drawable.ic_notification)
                .setContentTitle(title)
                .setContentText(message)
                .setStyle(NotificationCompat.BigTextStyle().bigText(message))
                .setPriority(NotificationCompat.PRIORITY_DEFAULT)
                .setAutoCancel(true)
                .setContentIntent(pendingIntent)
                .setVibrate(longArrayOf(0, 200, 100, 200))
                .build()
            notificationManager.notify(notificationId, notification)
            Log.d("NotificationManager", "Sent simple notification: $title")
        }
        catch (e: Exception){
            Log.e("NotificationManager", "Error sending simple notification", e)
        }
    }

    /**
     * Th·ª≠ l√™n l·ªãch b√°o th·ª©c t·ªëi ƒëa 3 l·∫ßn n·∫øu x·∫£y ra l·ªói
     */
    private suspend fun scheduleAlarmWithRetry(
        notificationId: Int,
        triggerTime: Long,
        title: String,
        message: String,
        location: String?,
        relatedId: Int,
        notificationType: NotificationType,
        isAlarm: Boolean = false
    ): Boolean {
        repeat(MAX_RETRIES) { attempt ->
            try {
                scheduleAlarm(notificationId, triggerTime, title, message, location, relatedId, notificationType, isAlarm)
                return true
            } catch (e: SecurityException) {
                Log.e("NotificationManager", "L·ªói quy·ªÅn tr√™n l·∫ßn th·ª≠ ${attempt + 1}: ${e.message}")
                return false
            } catch (e: Exception) {
                Log.e("NotificationManager", "L·ªói th·ª≠ l·∫ßn ${attempt + 1}", e)
                if (attempt < MAX_RETRIES - 1) delay(RETRY_DELAY_MS)
            }
        }
        return false
    }

    /**
     * L√™n l·ªãch b√°o th·ª©c (AlarmManager) t·∫°i th·ªùi ƒëi·ªÉm ch·ªâ ƒë·ªãnh
     */
    private fun scheduleAlarm(
        notificationId: Int,
        triggerTime: Long,
        title: String,
        message: String,
        location: String?,
        relatedId: Int,
        notificationType: NotificationType,
        isAlarm: Boolean = false
    ) {
        val intent = Intent(context, AlarmReceiver::class.java).apply {
            putExtra("notification_id", notificationId)
            putExtra("title", title)
            putExtra("message", message)
            putExtra("location", location)
            putExtra("related_id", relatedId)
            putExtra("notification_type", notificationType.name)
            putExtra("is_alarm", isAlarm) // Th√™m flag ƒë·ªÉ ph√¢n bi·ªát reminder v√† alarm
        }

        val pendingIntent = PendingIntent.getBroadcast(
            context, notificationId, intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        try {
            when {
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
                    if (alarmManager.canScheduleExactAlarms()) {
                        alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent)
                    } else {
                        throw SecurityException("Ch∆∞a c·∫•p quy·ªÅn SCHEDULE_EXACT_ALARM")
                    }
                }
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.M -> {
                    alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent)
                }
                else -> {
                    alarmManager.setExact(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent)
                }
            }

            val type = if (isAlarm) "alarm" else "reminder"
            Log.d("NotificationManager", "ƒê·∫∑t $type th√†nh c√¥ng l√∫c $triggerTime")
        } catch (e: SecurityException) {
            Log.e("NotificationManager", "Thi·∫øu quy·ªÅn khi ƒë·∫∑t b√°o th·ª©c: ${e.message}")
            throw e
        } catch (e: Exception) {
            Log.e("NotificationManager", "L·ªói khi ƒë·∫∑t b√°o th·ª©c: ${e.message}")
            throw e
        }
    }

    /**
     * T·∫°o n·ªôi dung th√¥ng b√°o nh·∫Øc nh·ªü (5 ph√∫t tr∆∞·ªõc)
     */
    private fun buildReminderMessage(
        title: String,
        description: String,
        location: String?,
        contactName: String?,
        appointmentTime: Long
    ): String = buildString {
        val appointmentTimeStr = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date(appointmentTime))
        append("‚è∞ Cu·ªôc h·∫πn s·∫Øp b·∫Øt ƒë·∫ßu l√∫c $appointmentTimeStr\n")
        append("üìÖ Ti√™u ƒë·ªÅ: $title")
        if (description.isNotBlank()) append("\nüìù N·ªôi dung: $description")
        if (!contactName.isNullOrBlank()) append("\nüë§ V·ªõi: $contactName")
        if (!location.isNullOrBlank()) append("\nüìç T·∫°i: $location")
        append("\nüí° B·∫°n c√≥ 5 ph√∫t ƒë·ªÉ chu·∫©n b·ªã!")
    }

    /**
     * T·∫°o n·ªôi dung b√°o th·ª©c (ƒë√∫ng gi·ªù)
     */
    private fun buildAlarmMessage(
        title: String,
        description: String,
        location: String?,
        contactName: String?
    ): String = buildString {
        append("üö® ƒê√É ƒê·∫æN GI·ªú CU·ªòC H·∫∏N!\n")
        append("üìÖ $title")
        if (description.isNotBlank()) append("\nüìù $description")
        if (!contactName.isNullOrBlank()) append("\nüë§ V·ªõi: $contactName")
        if (!location.isNullOrBlank()) append("\nüìç T·∫°i: $location")
        append("\n\n‚ö° H√£y b·∫Øt ƒë·∫ßu cu·ªôc h·∫πn ngay!")
    }

    /**
     * T·∫°o n·ªôi dung cho ghi ch√∫ tr∆∞·ªõc 5 ph√∫t
     */
    private fun buildReminderNotification(title:String,content:String,reminderTime:Long):String = buildString{
        val appointmentTimeStr = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date(reminderTime))
        append("‚è∞ Ghi ch√∫ s·∫Øp b·∫Øt ƒë·∫ßu l√∫c $appointmentTimeStr\n")
        append("üìÖ Ti√™u ƒë·ªÅ: $title\n")
        append("üìù N·ªôi dung: $content\n")
        append("üí° B·∫°n c√≥ 5 ph√∫t ƒë·ªÉ chu·∫©n b·ªã!")
    }


    /**
     * T·∫°o noi dung ghi chu dung h·∫πn
     */
    private fun buildAlarmNotification(
        title:String,content:String):String = buildString {
        append("üö® ƒê√É ƒê·∫æN GI·ªú CU·ªòC H·∫∏N!\n")
        append("üìÖ Ti√™u ƒë·ªÅ: $title\n")
        append("üìù N·ªôi dung: $content\n")
        append("‚ö° H√£y b·∫Øt ƒë·∫ßu cu·ªôc h·∫πn ngay!")
    }

    /**
     * Hu·ª∑ t·∫•t c·∫£ th√¥ng b√°o theo relatedId v√† lo·∫°i th√¥ng b√°o
     */
    suspend fun cancelNotificationsByRelatedId(
        relatedId: Int,
        notificationType: NotificationType
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            val notificationList = notificationRepository
                .getNotificationsByRelatedId(relatedId, notificationType)
                .first()

            notificationList.forEach { notification ->
                try {
                    cancelPendingOperation(notification.id)

                    val intent = Intent(context, AlarmReceiver::class.java)
                    val pendingIntent = PendingIntent.getBroadcast(
                        context,
                        notification.id,
                        intent,
                        PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                    )

                    alarmManager.cancel(pendingIntent)
                    notificationManager.cancel(notification.id)

                    Log.d("NotificationManager", "ƒê√£ hu·ª∑ th√¥ng b√°o ${notification.id}")
                } catch (e: Exception) {
                    Log.e("NotificationManager", "L·ªói khi hu·ª∑ th√¥ng b√°o ${notification.id}", e)
                }
            }

            val result = notificationRepository.deleteNotificationsByRelatedId(relatedId, notificationType)

            if (result.isSuccess) {
                Log.d("NotificationManager", "ƒê√£ hu·ª∑ t·∫•t c·∫£ th√¥ng b√°o cho relatedId: $relatedId, type: $notificationType")
                result.getOrDefault(false)
            } else {
                Log.e("NotificationManager", "L·ªói khi xo√° th√¥ng b√°o t·ª´ database", result.exceptionOrNull())
                false
            }

        } catch (e: Exception) {
            Log.e("NotificationManager", "L·ªói khi hu·ª∑ th√¥ng b√°o theo relatedId", e)
            false
        }
    }

    /**
     * H·ªßy t√°c v·ª• ƒëang ch·ªù x·ª≠ l√Ω (n·∫øu c√≥)
     */
    private fun cancelPendingOperation(id: Int) {
        pendingOperations[id]?.cancel()
        pendingOperations.remove(id)
    }

    /**
     * Ki·ªÉm tra quy·ªÅn ƒë·∫∑t b√°o th·ª©c ch√≠nh x√°c (d√πng ƒë∆∞·ª£c ·ªü UI)
     */
    fun hasExactAlarmPermission(): Boolean = canScheduleExactAlarms()

    /**
     * D·ªçn d·∫πp t·∫•t c·∫£ coroutine khi kh√¥ng d√πng n·ªØa
     */
    fun cleanup() {
        serviceScope.cancel()
        pendingOperations.values.forEach { it.cancel() }
        pendingOperations.clear()
    }
}